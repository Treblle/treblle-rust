[env]
	CARGO_MAKE_EXTEND_WORKSPACE_MAKEFILE = true
	WASM_TARGET = "wasm32-wasi"

[config]
	skip_core_tasks = true
	default_to_workspace = false

[tasks.default]
	dependencies = ["test", "build"]

[tasks.clean]
	command = "cargo"
	args = ["clean"]

[tasks.test]
	dependencies = ["test-unit", "test-wasm"]

[tasks.test-unit]
	command = "cargo"
	args = ["test", "-p", "treblle-traefik-wasm", "--no-default-features", "--features=test-utils", "--", "--nocapture"]

[tasks.test-wasm]
	command = "cargo"
	args = ["test", "-p", "treblle-traefik-wasm", "--target", "${WASM_TARGET}", "--features=wasm", "--", "--nocapture"]

[tasks.build]
	command = "cargo"
	args = ["build", "--target", "${WASM_TARGET}", "--features=wasm"]

[tasks.build-release]
	command = "cargo"
	args = ["build", "--target", "${WASM_TARGET}", "--features=wasm", "--release"]

[tasks.check]
	dependencies = ["check-wasm", "check-test"]

[tasks.check-wasm]
	command = "cargo"
	args = ["check", "--target", "${WASM_TARGET}", "--features=wasm"]

[tasks.check-test]
	command = "cargo"
	args = ["check", "--no-default-features", "--features=test-utils"]

[tasks.fmt]
	command = "cargo"
	args = ["fmt"]

[tasks.clippy]
	dependencies = ["clippy-wasm", "clippy-test"]

[tasks.clippy-wasm]
	command = "cargo"
	args = ["clippy", "--target", "${WASM_TARGET}", "--features=wasm", "--", "-D", "warnings"]

[tasks.clippy-test]
	command = "cargo"
	args = ["clippy", "--no-default-features", "--features=test-utils", "--", "-D", "warnings"]

[tasks.install-targets]
	command = "rustup"
	args = ["target", "add", "${WASM_TARGET}"]


[tasks.dev]
	dependencies = ["check", "test-unit"]

[tasks.ci]
	dependencies = ["fmt", "clippy", "test"]

[tasks.help]
script = [
	'''
    Available tasks:
      default        - Run tests and build debug WASM
      clean          - Clean build artifacts
      test           - Run all tests
      test-unit      - Run unit tests (non-WASM)
      test-wasm      - Run WASM tests
      build          - Build debug WASM
      build-release  - Build release WASM
      check          - Run cargo check
      fmt            - Run cargo fmt
      clippy         - Run clippy
      install-targets- Install required Rust targets
      dev            - Development checks
      ci             - CI pipeline tasks
    '''
]

# Install cargo-make if not installed
[tasks.ensure-cargo-make]
	command = "cargo"
	args = ["install", "cargo-make"]