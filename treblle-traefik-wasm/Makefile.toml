[env]
    TARGET           = "wasm32-wasip1"
    RUSTFLAGS        = "-C target-feature=+crt-static"
    WASI_SDK_PATH    = { source = "${HOME}/.wasi-sdk" }
    WASI_SDK_VERSION = "20"

[tasks.install-wasi-sdk]
    condition = { env_not_set = ["WASI_SDK_INSTALLED"] }
    script = '''
#!/usr/bin/env bash
WASI_SDK_PATH="${HOME}/.wasi-sdk"
WASI_VERSION="20"
PLATFORM="macos"  # Default to macOS

# Check if we're on an M1/M2 Mac
if [[ "$(uname -sm)" == "Darwin arm64" ]]; then
    echo "Detected Apple Silicon Mac"
    PLATFORM="macos"
fi

if [ ! -d "$WASI_SDK_PATH" ]; then
    echo "Installing WASI SDK..."
    mkdir -p "$WASI_SDK_PATH"
    curl -sL "https://github.com/WebAssembly/wasi-sdk/releases/download/wasi-sdk-${WASI_VERSION}/wasi-sdk-${WASI_VERSION}.0-${PLATFORM}.tar.gz" | tar xz -C "$WASI_SDK_PATH" --strip-components=1
    echo "WASI SDK installed successfully"
fi

# Install bindgen if not present
if ! command -v bindgen &> /dev/null; then
    echo "Installing bindgen..."
    cargo install bindgen-cli
fi
'''

[tasks.setup-mac-arm]
    condition    = { env = { "IS_MAC_ARM" = "true" } }
    dependencies = ["install-wasi-sdk"]
    env          = { CC = "${WASI_SDK_PATH}/bin/clang", CXX = "${WASI_SDK_PATH}/bin/clang++", AR = "${WASI_SDK_PATH}/bin/ar", CPATH = "/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include:${WASI_SDK_PATH}/share/wasi-sysroot/include", AWS_LC_RS_SKIP_BINDGEN = "0", AWS_LC_SYS_INCLUDES = "/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include:${WASI_SDK_PATH}/share/wasi-sysroot/include", AWS_LC_SYS_USE_SYSTEM = "1", AWS_LC_SYS_BINDGEN = "1", BINDGEN_EXTRA_CLANG_ARGS = "--sysroot=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk -I${WASI_SDK_PATH}/share/wasi-sysroot/include" }

[tasks.check-tools]
    dependencies = ["setup-mac-arm"]
    script = '''
#!/usr/bin/env bash
if ! command -v rustup &> /dev/null; then
    echo "rustup not found. Please install Rust toolchain first."
    exit 1
fi

# Ensure wasm32-wasip1 target is installed
if ! rustup target list | grep -q "wasm32-wasip1 (installed)"; then
    echo "Installing wasm32-wasip1 target..."
    rustup target add wasm32-wasip1
fi

# Ensure Xcode Command Line Tools are installed
if ! xcode-select -p &> /dev/null; then
    echo "Installing Xcode Command Line Tools..."
    xcode-select --install
fi
'''

[tasks.clean]
    command = "cargo"
    args    = ["clean"]

[tasks.build-wasm]
    dependencies = ["check-tools"]
    env = { CARGO_TARGET_WASM32_WASIP1_LINKER = "${WASI_SDK_PATH}/bin/clang", CARGO_TARGET_WASM32_WASIP1_AR = "${WASI_SDK_PATH}/bin/ar", AWS_LC_RS_SKIP_BINDGEN = "0", AWS_LC_SYS_INCLUDES = "/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include:${WASI_SDK_PATH}/share/wasi-sysroot/include", AWS_LC_SYS_USE_SYSTEM = "1", AWS_LC_SYS_BINDGEN = "1", CPATH = "/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include:${WASI_SDK_PATH}/share/wasi-sysroot/include", BINDGEN_EXTRA_CLANG_ARGS = "--sysroot=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk -I${WASI_SDK_PATH}/share/wasi-sysroot/include" }
    command = "cargo"
    args = [
        "build",
        "--target",
        "${TARGET}",
        "--release",
        "-p",
        "treblle-traefik-wasm",
    ]

[tasks.build-wasm-debug]
    dependencies = ["check-tools"]
    env          = { CARGO_PROFILE_DEV_BUILD_OVERRIDE_DEBUG = "true", CARGO_TARGET_WASM32_WASIP1_LINKER = "${WASI_SDK_PATH}/bin/clang", CARGO_TARGET_WASM32_WASIP1_AR = "${WASI_SDK_PATH}/bin/ar", AWS_LC_RS_SKIP_BINDGEN = "0", AWS_LC_SYS_INCLUDES = "/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include:${WASI_SDK_PATH}/share/wasi-sysroot/include", AWS_LC_SYS_USE_SYSTEM = "1", AWS_LC_SYS_BINDGEN = "1", CPATH = "/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include:${WASI_SDK_PATH}/share/wasi-sysroot/include", BINDGEN_EXTRA_CLANG_ARGS = "--sysroot=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk -I${WASI_SDK_PATH}/share/wasi-sysroot/include" }
    command      = "cargo"
    args         = ["build", "--target", "${TARGET}", "-p", "treblle-traefik-wasm"]

[tasks.default]
    dependencies = ["build-wasm"]
