// Generated by `wit-bindgen` 0.25.0. DO NOT EDIT!
// Options used:
#[allow(dead_code)]
pub mod exports {
    #[allow(dead_code)]
    pub mod traefik {
        #[allow(dead_code)]
        pub mod http_handler {
            #[allow(dead_code, clippy::all)]
            pub mod handler {
                #[used]
                #[doc(hidden)]
                #[cfg(target_arch = "wasm32")]
                static __FORCE_SECTION_REF: fn() =
                    super::super::super::super::__link_custom_section_describing_imports;
                use super::super::super::super::_rt;
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_handle_request_cabi<T: Guest>() -> i64 {
                    #[cfg(target_arch = "wasm32")]
                    _rt::run_ctors_once();
                    let result0 = T::handle_request();
                    _rt::as_i64(result0)
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_handle_response_cabi<T: Guest>(arg0: i32, arg1: i32) {
                    #[cfg(target_arch = "wasm32")]
                    _rt::run_ctors_once();
                    T::handle_response(arg0, arg1);
                }
                pub trait Guest {
                    fn handle_request() -> i64;
                    fn handle_response(req_ctx: i32, is_error: i32);
                }
                #[doc(hidden)]

                macro_rules! __export_traefik_http_handler_handler_0_1_0_cabi{
      ($ty:ident with_types_in $($path_to_types:tt)*) => (const _: () = {

        #[export_name = "traefik:http-handler/handler@0.1.0#handle-request"]
        unsafe extern "C" fn export_handle_request() -> i64 {
          $($path_to_types)*::_export_handle_request_cabi::<$ty>()
        }
        #[export_name = "traefik:http-handler/handler@0.1.0#handle-response"]
        unsafe extern "C" fn export_handle_response(arg0: i32,arg1: i32,) {
          $($path_to_types)*::_export_handle_response_cabi::<$ty>(arg0, arg1)
        }
      };);
    }
                #[doc(hidden)]
                pub(crate) use __export_traefik_http_handler_handler_0_1_0_cabi;
            }
        }
    }
}
mod _rt {

    #[cfg(target_arch = "wasm32")]
    pub fn run_ctors_once() {
        wit_bindgen_rt::run_ctors_once();
    }

    pub fn as_i64<T: AsI64>(t: T) -> i64 {
        t.as_i64()
    }

    pub trait AsI64 {
        fn as_i64(self) -> i64;
    }

    impl<'a, T: Copy + AsI64> AsI64 for &'a T {
        fn as_i64(self) -> i64 {
            (*self).as_i64()
        }
    }

    impl AsI64 for i64 {
        #[inline]
        fn as_i64(self) -> i64 {
            self as i64
        }
    }

    impl AsI64 for u64 {
        #[inline]
        fn as_i64(self) -> i64 {
            self as i64
        }
    }
}

/// Generates `#[no_mangle]` functions to export the specified type as the
/// root implementation of all generated traits.
///
/// For more information see the documentation of `wit_bindgen::generate!`.
///
/// ```rust
/// # macro_rules! export{ ($($t:tt)*) => (); }
/// # trait Guest {}
/// struct MyType;
///
/// impl Guest for MyType {
///     // ...
/// }
///
/// export!(MyType);
/// ```
#[allow(unused_macros)]
#[doc(hidden)]

macro_rules! __export_http_handler_impl {
  ($ty:ident) => (self::export!($ty with_types_in self););
  ($ty:ident with_types_in $($path_to_types_root:tt)*) => (
  $($path_to_types_root)*::exports::traefik::http_handler::handler::__export_traefik_http_handler_handler_0_1_0_cabi!($ty with_types_in $($path_to_types_root)*::exports::traefik::http_handler::handler);
  )
}
#[doc(inline)]
pub(crate) use __export_http_handler_impl as export;

#[cfg(target_arch = "wasm32")]
#[link_section = "component-type:wit-bindgen:0.25.0:http-handler:encoded world"]
#[doc(hidden)]
pub static __WIT_BINDGEN_COMPONENT_TYPE: [u8; 291] = *b"\
\0asm\x0d\0\x01\0\0\x19\x16wit-component-encoding\x04\0\x07\xa0\x01\x01A\x02\x01\
A\x02\x01B\x04\x01@\0\0x\x04\0\x0ehandle-request\x01\0\x01@\x02\x07req-ctxz\x08i\
s-errorz\x01\0\x04\0\x0fhandle-response\x01\x01\x04\x01\"traefik:http-handler/ha\
ndler@0.1.0\x05\0\x04\x01'traefik:http-handler/http-handler@0.1.0\x04\0\x0b\x12\x01\
\0\x0chttp-handler\x03\0\0\0G\x09producers\x01\x0cprocessed-by\x02\x0dwit-compon\
ent\x070.208.1\x10wit-bindgen-rust\x060.25.0";

#[inline(never)]
#[doc(hidden)]
#[cfg(target_arch = "wasm32")]
pub fn __link_custom_section_describing_imports() {
    wit_bindgen_rt::maybe_link_cabi_realloc();
}
